@model IntensiveCodeCamp.Models.Entities.Course
@{
    ViewBag.Title = "Create Course";
    Layout = "~/Views/Shared/_SharedLayout.cshtml";
}

<h2 class="text-center">Create</h2>
@using (Html.BeginForm(method: FormMethod.Post, actionName: "Create", controllerName: "Course"))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <div class="form-group ">
        @Html.LabelFor(C => C.Name)
        @Html.EditorFor(C => C.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(C => C.Name, "", new { @class = "text-danger" })
    </div>
    <div class="form-group ">
        @Html.LabelFor(C => C.Description)
        @Html.EditorFor(C => C.Description, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(C => C.Description, "", new { @class = "text-danger" })
    </div>
    <div class="form-group ">
        @Html.LabelFor(C => C.MaxDgree)
        @Html.EditorFor(C => C.MaxDgree, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(C => C.MaxDgree, "", new { @class = "text-danger" })
    </div>
    <div class="form-group ">
        @Html.LabelFor(C => C.MinDgree)
        @Html.EditorFor(C => C.MinDgree, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(C => C.MinDgree, "", new { @class = "text-danger" })
    </div>
    <div class="form-group ">
        @Html.LabelFor(C => C.TrackID)
        @Html.DropDownList("TrackID", null, new { @class = "form-control" })
    </div>
    <input type="submit" value="Add" class="btn btn-success w-100" />
}
@section ValidationScripts{
    @Scripts.Render("~/ClientSideValidationScripts")
}
